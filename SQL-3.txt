문자형으로 데이터 유형 변환하기 ( TO_CHAR )

숫자형 -->> 문자형으로 변환,

날짜형 -->> 문자형으로 변환할 때 사용하는 함수

예제 : 오늘이 무슨 요일인지 출력

select sysdate
   from dual;

select to_char(sysdate, 'day')
   from dual;                

* 날짜형식

년도 : RRRR, YYYY, RR, YY
월 : MM, MON
일 : DD
시간 : HH, HH24
분 : MI
초 : SS
요일 : day, dy, d

예제 : 11월에 입사한 사원들 출력하기

select ename, hiredate
   from emp
   where to_char(hiredate,'MM')='11';

문자열을 날짜로 형 변환하는 함수 (to_date)

예제 :

select to_date ('18700710', 'YYYYMMDDHH24MISS')
  from dual;

select ename, hiredate
   from emp
   where hiredate=to_date('81/11/17','RR/MM/DD');

--> 날짜형 데이터를 검색할 때는 반드시 to_date 함수를 사용할 것이 필수!

(확실한 데이터 검색을 위해)


숫자로 형변환하는 함수 (to_number)

select ename, sal
 from emp
 where sal='3000';

데이터 형식이 숫자인 sal에 문자열 '3000'으로 검색해도 검색이 될까?

친절한 오라클은 자동으로 int로 바꿔줘서 검색을 해준다.

그런데 이러한 게 데이터 양이 큰 경우에는 오히려 독이 될 수 있다.

SQL 실행이 느려지고, '자동'이기 때문에 나는 느려지는 원인을 찾기 힘듬.

현업에서는 차라리 오류가 나는게 낫다고 한다. (고치면 되니까)

그래서 문자열이 들어가게 되는 경우 꼭 to_number를 활용하자

select ename, sal
 from emp
 where sal=to_number('3000');

null 값 대신에 다른 값을 출력하고 싶을 때 사용하는 함수( nvl 함수)

nvl( 컬럼명, null 대신 출력할 값 )

select ename, comm                                                                
  from emp;                                                                               

select ename, nvl(to_char(comm),'no comm')
  from emp;
                                                         
-- emp 테이블의 사원과 커미션을 확인

if 문을 SQL로 구현할 때 사용하는 함수 1 (decode 함수)

if 문 : 만약에 무슨일이 벌어지면 어떻게 행동하라고 컴퓨터 프로그래밍을 하는것

decode( 컬럼명, 조건1, 출력1, 조건2, 출력2, [그 밖의 경우] 출력 3 ) 


예제 : 부서번호가 10이면 5600을 출력하고 20이면 4500을 출력하고 나머지 부서번호는 0을 출력하기

select ename, sal, deptno, decode(deptno,10,5600,20,4500,0) as 보너스
 from emp;

하지만 decode는 특정 값과 같은 경우(=)만 거를 수 있고, 특정 값 이상일 때, 이하일 때 같은 부등호 비교는 불가능.

그럴 때 사용하는 것이 case 문이다.

if 문을 SQL로 구현할 때 사용하는 함수 2 (case 문)

case when 컬럼명 부등호조건문1 then 출력1 when 부등호조건문2 then 출력 2 else 출력 3 end

예제 : 이름, 월급, 부서번호, 보너스를 출력하는데 보너스가 부서번호가 10번이면 500을 출력하고
	부서번호가 20번이면 300을 출력하고 나머지 부서번호면 0을 출력하시오

select ename, sal, deptno, case when deptno=10 then 500 when deptno=20 then 300 else 0 end as 보너스
   from emp;

* 복수행 함수


1. 데이터의 개수를 세는 집계 함수 (count)

예제 : 사원 테이블에 들어있는 사원이 몇 명인지 출력하기

select count(*)
 from emp;

15명의 사원이 들어있는 emp 테이블이기 때문에 15가 출력되었다.

2. 수치 데이터 칼럼의 합계를 출력하는 함수 (SUM)

예제 : 직업이 SALESMAN인 사원의 월급의 총합을 출력하기

select sum(sal)
 from emp
 where job='SALESMAN';

3. 수치 데이터 컬럼의 평균을 출력하는 함수 (AVG)

select avg(comm)                                                                                        
 from emp;                                                                                                 

select avg(nvl(comm,0))
 from emp;                                                                                                 

nvl로 comm을 덮었지만 사실 nvl은 null 값을 0으로 바꾸기 때문에 값에 영향을 줄 수 없을 것 같다.

그런데 왜 두 개의 결과 값이 달라졌을까?

집계 함수는 null 값을 0으로 보지 않고, 계산 자체를 건너뛰어 버린다.

그래서 1번의 경우는 comm이 없는 경우 나누질 않아서 더 크고,

2번은 comm이 없는 경우를 0으로 바꿔서 계산에 포함되었기 때문에 제대로 평균이 구해졌다.

4. 수치 데이터 컬럼의 최대, 최소값을 구하는 함수 ( max, min ) 

select max(sal), min(sal)
 from emp;


5. 그룹 별로 집계 결과를 볼 수 있도록 하는 절 (group by)

select job, max(sal),min(sal),avg(sal)
 from emp
 group by job;

select job, max(sal),min(sal),round(avg(sal))
 from emp
 where job is not null
 group by job
 order by job;

-- 배운 것들을 활용해서 깔끔하게 정렬